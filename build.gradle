buildscript {
    //在build.gradle里引用
    apply from: "${rootDir}/repositories.gradle"
    dependencies {
        classpath("io.spring.javaformat:spring-javaformat-gradle-plugin:0.0.38")
    }
}

plugins {
    id 'java'
}

allprojects {
    // 指定需要的插件
    // 指定语言
    apply plugin: 'java-library'
    //指定编辑器
    apply plugin: 'idea'
    // 指定代码格式化插件
    apply plugin: "io.spring.javaformat"
    // maven 发布插件
    apply plugin: 'maven-publish'
    apply plugin: 'signing'

    group 'org.gitee.ztkyn'
    version '1.0-SNAPSHOT'

    //指定JDK版本
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17

    //指定编码格式
    [compileJava, compileTestJava, javadoc]*.options*.encoding = 'UTF-8'

    //在build.gradle里引用
    apply from: "${rootDir}/repositories.gradle"

    // 配置全局依赖版本信息
    ext {
        ttlVersion = '2.14.2'
        okhttpsVersion = '4.0.1'
        hutoolVersion = '5.8.11'
        springBootVersion = '3.1.0'
        redissonVersion = '3.22.1'
        knife4jVersion = '4.1.0'
        cosidVersion = '2.1.1'

        guavaVersion = '32.0.0-jre'
        mapstructVersion = '1.5.3.Final'
        lombokVersion = '1.18.26'
    }

    //配置子模块依赖
    dependencies {
        implementation(enforcedPlatform("org.springframework.boot:spring-boot-dependencies:${springBootVersion}"))

        implementation("org.slf4j:slf4j-api")
        implementation("ch.qos.logback:logback-classic")
        // MapStruct是一个Java注释处理器，用于生成类型安全的bean映射类
        implementation "org.mapstruct:mapstruct:${mapstructVersion}"


        // jackson
        implementation("com.fasterxml.jackson.core:jackson-databind")
        implementation("com.fasterxml.jackson.datatype:jackson-datatype-jsr310")
        implementation("com.fasterxml.jackson.datatype:jackson-datatype-eclipse-collections")
        implementation("com.fasterxml.jackson.datatype:jackson-datatype-guava")


        implementation("com.google.guava:guava:${guavaVersion}")
        // eclipse 封装 集合类
        implementation("org.eclipse.collections:eclipse-collections-api")
        implementation("org.eclipse.collections:eclipse-collections")

        // 新一代内存缓存
        api("com.github.ben-manes.caffeine:caffeine")

        // InheritableThreadLocal 替代品，解决在线程池失效的问题
        api("com.alibaba:transmittable-thread-local:${ttlVersion}")

        // 反应式流 Reactive Streams
        api("io.projectreactor:reactor-core")


        annotationProcessor("org.projectlombok:lombok-mapstruct-binding:0.2.0")
        annotationProcessor("org.mapstruct:mapstruct-processor:${mapstructVersion}")
        compileOnly("org.projectlombok:lombok")
        annotationProcessor("org.projectlombok:lombok:${lombokVersion}")

        testAnnotationProcessor("org.mapstruct:mapstruct-processor:${mapstructVersion}")
        testCompileOnly("org.projectlombok:lombok")
        testAnnotationProcessor("org.projectlombok:lombok:${lombokVersion}")

        testImplementation("org.junit.jupiter:junit-jupiter-api")
        testImplementation("org.junit.jupiter:junit-jupiter-params")
        testImplementation("org.junit.platform:junit-platform-suite-api")
        testImplementation("ch.qos.logback:logback-classic")
        testImplementation("io.projectreactor:reactor-test")

        testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine")
        testRuntimeOnly("org.junit.platform:junit-platform-launcher")
        testRuntimeOnly("org.junit.platform:junit-platform-suite-engine")

    }

}


test {
    useJUnitPlatform()
}