buildscript {
    //在build.gradle里引用
    apply from: "${rootDir}/repositories.gradle"
    dependencies {
        classpath("io.spring.javaformat:spring-javaformat-gradle-plugin:0.0.38")
    }
}

plugins {
    id 'java'
}

allprojects {
    // 指定需要的插件
    // 指定语言
    apply plugin: 'java-library'
    //指定编辑器
    apply plugin: 'idea'
    // 指定代码格式化插件
    apply plugin: "io.spring.javaformat"
    // maven 发布插件
    apply plugin: 'maven-publish'
    apply plugin: 'signing'

    group 'org.gitee.ztkyn'
    version '1.0-SNAPSHOT'

    //指定JDK版本
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17

    //指定编码格式
    [compileJava, compileTestJava, javadoc]*.options*.encoding = 'UTF-8'

    //在build.gradle里引用
    apply from: "${rootDir}/repositories.gradle"

    // 配置全局依赖版本信息
    ext {
        junitVersion = '5.9.2'
        lombokVersion = '1.18.24'
        jacksonVersion = '2.14.1'
        caffeineVersion = '3.1.2'
        slf4jVersion = '2.0.6'
        logbackVersion = '1.4.5'
        guavaVersion = '31.1-jre'
        eclipseCollectionVerion = '11.1.0'
        mapstructVersion = '1.5.3.Final'
        logbackVersion = '1.4.5'
        reactorVersion = '3.5.3'
        ttlVersion = '2.14.2'
        okhttpsVersion = '4.0.1'
        hutoolVersion = '5.8.11'
    }

    //配置子模块依赖
    dependencies {
        api("org.slf4j:slf4j-api:${slf4jVersion}")
        api("ch.qos.logback:logback-classic:${logbackVersion}")
        // MapStruct是一个Java注释处理器，用于生成类型安全的bean映射类
        implementation "org.mapstruct:mapstruct:${mapstructVersion}"
        compileOnly "org.projectlombok:lombok:${lombokVersion}"

        annotationProcessor("org.projectlombok:lombok-mapstruct-binding:0.2.0")
        annotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"
        annotationProcessor("org.projectlombok:lombok:${lombokVersion}")

        testAnnotationProcessor("org.mapstruct:mapstruct-processor:${mapstructVersion}")
        testAnnotationProcessor("org.projectlombok:lombok:${lombokVersion}")
        testImplementation "org.junit.jupiter:junit-jupiter-api:${junitVersion}"
        testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${junitVersion}"
        testImplementation("ch.qos.logback:logback-classic:${logbackVersion}")
    }

}


test {
    useJUnitPlatform()
}